// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: mapreduce.proto

#include "mapreduce.pb.h"
#include "mapreduce.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace mapreduce {

static const char* ClusterService_method_names[] = {
  "/mapreduce.ClusterService/InitCluster",
};

std::unique_ptr< ClusterService::Stub> ClusterService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ClusterService::Stub> stub(new ClusterService::Stub(channel, options));
  return stub;
}

ClusterService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_InitCluster_(ClusterService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ClusterService::Stub::InitCluster(::grpc::ClientContext* context, const ::mapreduce::InitClusterRequest& request, ::mapreduce::InitClusterResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mapreduce::InitClusterRequest, ::mapreduce::InitClusterResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_InitCluster_, context, request, response);
}

void ClusterService::Stub::async::InitCluster(::grpc::ClientContext* context, const ::mapreduce::InitClusterRequest* request, ::mapreduce::InitClusterResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mapreduce::InitClusterRequest, ::mapreduce::InitClusterResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_InitCluster_, context, request, response, std::move(f));
}

void ClusterService::Stub::async::InitCluster(::grpc::ClientContext* context, const ::mapreduce::InitClusterRequest* request, ::mapreduce::InitClusterResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_InitCluster_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mapreduce::InitClusterResponse>* ClusterService::Stub::PrepareAsyncInitClusterRaw(::grpc::ClientContext* context, const ::mapreduce::InitClusterRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mapreduce::InitClusterResponse, ::mapreduce::InitClusterRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_InitCluster_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mapreduce::InitClusterResponse>* ClusterService::Stub::AsyncInitClusterRaw(::grpc::ClientContext* context, const ::mapreduce::InitClusterRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncInitClusterRaw(context, request, cq);
  result->StartCall();
  return result;
}

ClusterService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ClusterService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ClusterService::Service, ::mapreduce::InitClusterRequest, ::mapreduce::InitClusterResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ClusterService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mapreduce::InitClusterRequest* req,
             ::mapreduce::InitClusterResponse* resp) {
               return service->InitCluster(ctx, req, resp);
             }, this)));
}

ClusterService::Service::~Service() {
}

::grpc::Status ClusterService::Service::InitCluster(::grpc::ServerContext* context, const ::mapreduce::InitClusterRequest* request, ::mapreduce::InitClusterResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* JobService_method_names[] = {
  "/mapreduce.JobService/SubmitJob",
};

std::unique_ptr< JobService::Stub> JobService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< JobService::Stub> stub(new JobService::Stub(channel, options));
  return stub;
}

JobService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_SubmitJob_(JobService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status JobService::Stub::SubmitJob(::grpc::ClientContext* context, const ::mapreduce::SubmitJobRequest& request, ::mapreduce::SubmitJobResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mapreduce::SubmitJobRequest, ::mapreduce::SubmitJobResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SubmitJob_, context, request, response);
}

void JobService::Stub::async::SubmitJob(::grpc::ClientContext* context, const ::mapreduce::SubmitJobRequest* request, ::mapreduce::SubmitJobResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mapreduce::SubmitJobRequest, ::mapreduce::SubmitJobResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SubmitJob_, context, request, response, std::move(f));
}

void JobService::Stub::async::SubmitJob(::grpc::ClientContext* context, const ::mapreduce::SubmitJobRequest* request, ::mapreduce::SubmitJobResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SubmitJob_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mapreduce::SubmitJobResponse>* JobService::Stub::PrepareAsyncSubmitJobRaw(::grpc::ClientContext* context, const ::mapreduce::SubmitJobRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mapreduce::SubmitJobResponse, ::mapreduce::SubmitJobRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SubmitJob_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mapreduce::SubmitJobResponse>* JobService::Stub::AsyncSubmitJobRaw(::grpc::ClientContext* context, const ::mapreduce::SubmitJobRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSubmitJobRaw(context, request, cq);
  result->StartCall();
  return result;
}

JobService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      JobService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< JobService::Service, ::mapreduce::SubmitJobRequest, ::mapreduce::SubmitJobResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](JobService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mapreduce::SubmitJobRequest* req,
             ::mapreduce::SubmitJobResponse* resp) {
               return service->SubmitJob(ctx, req, resp);
             }, this)));
}

JobService::Service::~Service() {
}

::grpc::Status JobService::Service::SubmitJob(::grpc::ServerContext* context, const ::mapreduce::SubmitJobRequest* request, ::mapreduce::SubmitJobResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace mapreduce

